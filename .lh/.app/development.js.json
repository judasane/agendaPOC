{
    "sourceFile": ".app/development.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1651155113687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651155179464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n \r\n   if (isWindows) {\r\n     const currentPath = process.cwd();\r\n     const mongodbVersions = fs\r\n-      .readdirSync(`C:\\Program Files\\MongoDB\\Server`)\r\n+      .readdirSync(`C:\\\\Program Files\\\\MongoDB\\\\Server\\\\`)\r\n       .sort()\r\n       .reverse();\r\n     const latestMongodbVersion = mongodbVersions && mongodbVersions[0];\r\n \r\n"
                },
                {
                    "date": 1651155790688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n \r\n   if (isWindows) {\r\n     const currentPath = process.cwd();\r\n     const mongodbVersions = fs\r\n-      .readdirSync(`C:\\\\Program Files\\\\MongoDB\\\\Server\\\\`)\r\n+      .readdirSync(`C:\\Program Files\\MongoDB\\Server\\`)\r\n       .sort()\r\n       .reverse();\r\n     const latestMongodbVersion = mongodbVersions && mongodbVersions[0];\r\n \r\n"
                },
                {
                    "date": 1651156412832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,215 @@\n+/* eslint-disable consistent-return */\r\n+\r\n+import chalk from \"chalk\";\r\n+import util from \"util\";\r\n+import child_process, { spawn } from \"child_process\";\r\n+import path from \"path\";\r\n+import fs from \"fs\";\r\n+import os from \"os\";\r\n+import commandExists from \"command-exists\";\r\n+import webpack from \"webpack\";\r\n+import ps from \"ps-node\";\r\n+import Loader from \"./loader\";\r\n+import serverConfig from \"../webpack.config\";\r\n+\r\n+const isWindows = os.platform() === \"win32\";\r\n+const exec = util.promisify(child_process.exec);\r\n+\r\n+const handleCleanup = (processIds = []) => {\r\n+  process.loader.stop();\r\n+\r\n+  processIds.forEach((processId) => {\r\n+    ps.kill(processId);\r\n+  });\r\n+  process.exit();\r\n+};\r\n+\r\n+const handleSignalEvents = (processIds = []) => {\r\n+  process.on(\"SIGINT\", () => handleCleanup(processIds));\r\n+  process.on(\"SIGTERM\", () => handleCleanup(processIds));\r\n+};\r\n+\r\n+const handleServerProcessMessages = () => {\r\n+  process.serverProcess.on(\"message\", (message) => {\r\n+    const processMessages = [\"server_closed\"];\r\n+\r\n+    if (!processMessages.includes(message)) {\r\n+      process.loader.stable(message);\r\n+    }\r\n+  });\r\n+};\r\n+\r\n+const handleServerProcessSTDIO = () => {\r\n+  try {\r\n+    if (process.serverProcess) {\r\n+      process.serverProcess.on(\"error\", (error) => {\r\n+        console.log(error);\r\n+      });\r\n+\r\n+      process.serverProcess.stdout.on(\"data\", (data) => {\r\n+        console.log(data.toString());\r\n+      });\r\n+\r\n+      process.serverProcess.stderr.on(\"data\", (data) => {\r\n+        process.loader.stop();\r\n+        console.log(chalk.redBright(data.toString()));\r\n+      });\r\n+    }\r\n+  } catch (exception) {\r\n+    throw new Error(\r\n+      `[actionName.handleServerProcessSTDIO] ${exception.message}`\r\n+    );\r\n+  }\r\n+};\r\n+\r\n+const startApplicationProcess = () => {\r\n+  const serverProcess = child_process.fork(path.resolve(\"dist/index.js\"), [], {\r\n+    // NOTE: Pipe stdin, stdout, and stderr. IPC establishes a message channel so we\r\n+    // communicate with the child_process.\r\n+    silent: true,\r\n+  });\r\n+\r\n+  process.serverProcess = serverProcess;\r\n+\r\n+  handleServerProcessSTDIO();\r\n+  handleServerProcessMessages();\r\n+};\r\n+\r\n+const restartApplicationProcess = () => {\r\n+  if (process.serverProcess && process.serverProcess.pid) {\r\n+    ps.kill(process.serverProcess.pid);\r\n+    startApplicationProcess();\r\n+  }\r\n+};\r\n+\r\n+const startWebpack = () => {\r\n+  process.loader.text(\"Building application...\");\r\n+\r\n+  const serverCompiler = webpack(serverConfig);\r\n+\r\n+  serverCompiler.watch({}, (error, stats) => {\r\n+    if (error) {\r\n+      console.error(error.stack || error);\r\n+      if (error.details) {\r\n+        console.error(error.details);\r\n+      }\r\n+      return;\r\n+    }\r\n+\r\n+    if (stats.hasErrors()) {\r\n+      process.loader.stop();\r\n+      console.log(\r\n+        `\\n${chalk.yellowBright(\"Errors occurred during the build process:\")}`\r\n+      );\r\n+\r\n+      console.log(\r\n+        stats.toString({\r\n+          assets: false,\r\n+          builtAt: false,\r\n+          cachedAssets: false,\r\n+          cachedModules: false,\r\n+          chunks: false,\r\n+          colors: true,\r\n+          entrypoints: false,\r\n+          hash: false,\r\n+          modules: false,\r\n+          timings: false,\r\n+          version: false,\r\n+        })\r\n+      );\r\n+    }\r\n+  });\r\n+\r\n+  serverCompiler.hooks.done.tap(\"App\", () => {\r\n+    if (!process.serverProcess) {\r\n+      process.loader.text(\"Starting server...\");\r\n+      startApplicationProcess();\r\n+    } else {\r\n+      process.loader.stop();\r\n+      process.loader.start(\"Restarting server...\");\r\n+      restartApplicationProcess();\r\n+    }\r\n+  });\r\n+};\r\n+\r\n+const getMongoProcessId = (stdout = null) => {\r\n+  const forkedProcessId = stdout && stdout.match(/forked process:+\\s[0-9]+/gi);\r\n+  const processId =\r\n+    forkedProcessId &&\r\n+    forkedProcessId[0] &&\r\n+    forkedProcessId[0].replace(\"forked process: \", \"\");\r\n+\r\n+  return processId && parseInt(processId, 10);\r\n+};\r\n+\r\n+const startMongoDB = async () => {\r\n+  process.loader.text(\"Starting MongoDB...\");\r\n+\r\n+  const dataDirectoryExists = fs.existsSync(\".data/mongodb\");\r\n+\r\n+  if (!dataDirectoryExists) {\r\n+    fs.mkdirSync(\".data/mongodb\", { recursive: true });\r\n+  }\r\n+\r\n+  if (isWindows) {\r\n+    const currentPath = process.cwd();\r\n+    const mongodbVersions = fs\r\n+      .readdirSync(`C:\\\\Program Files\\\\MongoDB\\\\Server\\\\`)\r\n+      .sort()\r\n+      .reverse();\r\n+    const latestMongodbVersion = mongodbVersions && mongodbVersions[0];\r\n+\r\n+    if (isWindows && mongodbVersions && mongodbVersions.length === 0) {\r\n+      console.log(\r\n+        chalk.red(\r\n+          \"Couldn't find any MongoDB versions in C:\\\\Program Files\\\\MongoDB\\\\Server. Please double-check your MongoDB installation or re-install MongoDB and try again.\\n\"\r\n+        )\r\n+      );\r\n+      process.exit(1);\r\n+      return;\r\n+    }\r\n+\r\n+    const mongodbWindowsCommand = `C:\\\\Program Files\\\\MongoDB\\\\Server\\\\${latestMongodbVersion}\\\\bin\\\\mongod`;\r\n+    spawn(mongodbWindowsCommand, [\r\n+      \"--dbpath\",\r\n+      `${currentPath}/.data/mongodb`,\r\n+      \"--quiet\",\r\n+    ]);\r\n+\r\n+    return true;\r\n+  }\r\n+\r\n+  const { stdout } = await exec(\r\n+    \"mongod --port 27017 --dbpath ./.data/mongodb --quiet --fork --logpath ./.data/mongodb/log\"\r\n+  );\r\n+  return getMongoProcessId(stdout);\r\n+};\r\n+\r\n+const warnMongoDBMissing = () => {\r\n+  console.warn(`\r\n+  ${chalk.red(\"MongoDB not installed.\")}\\n\r\n+  ${chalk.green(\r\n+    \"Download MongoDB at https://www.mongodb.com/try/download/community\"\r\n+  )}\r\n+\r\n+  After installation, try to run this command again to start MongoDB alongside your app.\\n\r\n+  `);\r\n+};\r\n+\r\n+const developmentServer = async () => {\r\n+  process.loader = new Loader({ defaultMessage: \"Starting server...\" });\r\n+\r\n+  const mongodbExists = commandExists.sync(\"mongod\");\r\n+\r\n+  if (mongodbExists) {\r\n+    //const mongoProcessId = await startMongoDB();\r\n+    startWebpack();\r\n+    handleSignalEvents(isWindows ? [] : [mongoProcessId]);\r\n+  } else {\r\n+    process.loader.stop();\r\n+    warnMongoDBMissing();\r\n+    process.exit(1);\r\n+  }\r\n+};\r\n+\r\n+(async () => developmentServer())();\r\n"
                },
                {
                    "date": 1651156414150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,219 +212,4 @@\n   }\r\n };\r\n \r\n (async () => developmentServer())();\r\n-/* eslint-disable consistent-return */\r\n-\r\n-import chalk from \"chalk\";\r\n-import util from \"util\";\r\n-import child_process, { spawn } from \"child_process\";\r\n-import path from \"path\";\r\n-import fs from \"fs\";\r\n-import os from \"os\";\r\n-import commandExists from \"command-exists\";\r\n-import webpack from \"webpack\";\r\n-import ps from \"ps-node\";\r\n-import Loader from \"./loader\";\r\n-import serverConfig from \"../webpack.config\";\r\n-\r\n-const isWindows = os.platform() === \"win32\";\r\n-const exec = util.promisify(child_process.exec);\r\n-\r\n-const handleCleanup = (processIds = []) => {\r\n-  process.loader.stop();\r\n-\r\n-  processIds.forEach((processId) => {\r\n-    ps.kill(processId);\r\n-  });\r\n-  process.exit();\r\n-};\r\n-\r\n-const handleSignalEvents = (processIds = []) => {\r\n-  process.on(\"SIGINT\", () => handleCleanup(processIds));\r\n-  process.on(\"SIGTERM\", () => handleCleanup(processIds));\r\n-};\r\n-\r\n-const handleServerProcessMessages = () => {\r\n-  process.serverProcess.on(\"message\", (message) => {\r\n-    const processMessages = [\"server_closed\"];\r\n-\r\n-    if (!processMessages.includes(message)) {\r\n-      process.loader.stable(message);\r\n-    }\r\n-  });\r\n-};\r\n-\r\n-const handleServerProcessSTDIO = () => {\r\n-  try {\r\n-    if (process.serverProcess) {\r\n-      process.serverProcess.on(\"error\", (error) => {\r\n-        console.log(error);\r\n-      });\r\n-\r\n-      process.serverProcess.stdout.on(\"data\", (data) => {\r\n-        console.log(data.toString());\r\n-      });\r\n-\r\n-      process.serverProcess.stderr.on(\"data\", (data) => {\r\n-        process.loader.stop();\r\n-        console.log(chalk.redBright(data.toString()));\r\n-      });\r\n-    }\r\n-  } catch (exception) {\r\n-    throw new Error(\r\n-      `[actionName.handleServerProcessSTDIO] ${exception.message}`\r\n-    );\r\n-  }\r\n-};\r\n-\r\n-const startApplicationProcess = () => {\r\n-  const serverProcess = child_process.fork(path.resolve(\"dist/index.js\"), [], {\r\n-    // NOTE: Pipe stdin, stdout, and stderr. IPC establishes a message channel so we\r\n-    // communicate with the child_process.\r\n-    silent: true,\r\n-  });\r\n-\r\n-  process.serverProcess = serverProcess;\r\n-\r\n-  handleServerProcessSTDIO();\r\n-  handleServerProcessMessages();\r\n-};\r\n-\r\n-const restartApplicationProcess = () => {\r\n-  if (process.serverProcess && process.serverProcess.pid) {\r\n-    ps.kill(process.serverProcess.pid);\r\n-    startApplicationProcess();\r\n-  }\r\n-};\r\n-\r\n-const startWebpack = () => {\r\n-  process.loader.text(\"Building application...\");\r\n-\r\n-  const serverCompiler = webpack(serverConfig);\r\n-\r\n-  serverCompiler.watch({}, (error, stats) => {\r\n-    if (error) {\r\n-      console.error(error.stack || error);\r\n-      if (error.details) {\r\n-        console.error(error.details);\r\n-      }\r\n-      return;\r\n-    }\r\n-\r\n-    if (stats.hasErrors()) {\r\n-      process.loader.stop();\r\n-      console.log(\r\n-        `\\n${chalk.yellowBright(\"Errors occurred during the build process:\")}`\r\n-      );\r\n-\r\n-      console.log(\r\n-        stats.toString({\r\n-          assets: false,\r\n-          builtAt: false,\r\n-          cachedAssets: false,\r\n-          cachedModules: false,\r\n-          chunks: false,\r\n-          colors: true,\r\n-          entrypoints: false,\r\n-          hash: false,\r\n-          modules: false,\r\n-          timings: false,\r\n-          version: false,\r\n-        })\r\n-      );\r\n-    }\r\n-  });\r\n-\r\n-  serverCompiler.hooks.done.tap(\"App\", () => {\r\n-    if (!process.serverProcess) {\r\n-      process.loader.text(\"Starting server...\");\r\n-      startApplicationProcess();\r\n-    } else {\r\n-      process.loader.stop();\r\n-      process.loader.start(\"Restarting server...\");\r\n-      restartApplicationProcess();\r\n-    }\r\n-  });\r\n-};\r\n-\r\n-const getMongoProcessId = (stdout = null) => {\r\n-  const forkedProcessId = stdout && stdout.match(/forked process:+\\s[0-9]+/gi);\r\n-  const processId =\r\n-    forkedProcessId &&\r\n-    forkedProcessId[0] &&\r\n-    forkedProcessId[0].replace(\"forked process: \", \"\");\r\n-\r\n-  return processId && parseInt(processId, 10);\r\n-};\r\n-\r\n-const startMongoDB = async () => {\r\n-  process.loader.text(\"Starting MongoDB...\");\r\n-\r\n-  const dataDirectoryExists = fs.existsSync(\".data/mongodb\");\r\n-\r\n-  if (!dataDirectoryExists) {\r\n-    fs.mkdirSync(\".data/mongodb\", { recursive: true });\r\n-  }\r\n-\r\n-  if (isWindows) {\r\n-    const currentPath = process.cwd();\r\n-    const mongodbVersions = fs\r\n-      .readdirSync(`C:\\Program Files\\MongoDB\\Server\\`)\r\n-      .sort()\r\n-      .reverse();\r\n-    const latestMongodbVersion = mongodbVersions && mongodbVersions[0];\r\n-\r\n-    if (isWindows && mongodbVersions && mongodbVersions.length === 0) {\r\n-      console.log(\r\n-        chalk.red(\r\n-          \"Couldn't find any MongoDB versions in C:\\\\Program Files\\\\MongoDB\\\\Server. Please double-check your MongoDB installation or re-install MongoDB and try again.\\n\"\r\n-        )\r\n-      );\r\n-      process.exit(1);\r\n-      return;\r\n-    }\r\n-\r\n-    const mongodbWindowsCommand = `C:\\\\Program Files\\\\MongoDB\\\\Server\\\\${latestMongodbVersion}\\\\bin\\\\mongod`;\r\n-    spawn(mongodbWindowsCommand, [\r\n-      \"--dbpath\",\r\n-      `${currentPath}/.data/mongodb`,\r\n-      \"--quiet\",\r\n-    ]);\r\n-\r\n-    return true;\r\n-  }\r\n-\r\n-  const { stdout } = await exec(\r\n-    \"mongod --port 27017 --dbpath ./.data/mongodb --quiet --fork --logpath ./.data/mongodb/log\"\r\n-  );\r\n-  return getMongoProcessId(stdout);\r\n-};\r\n-\r\n-const warnMongoDBMissing = () => {\r\n-  console.warn(`\r\n-  ${chalk.red(\"MongoDB not installed.\")}\\n\r\n-  ${chalk.green(\r\n-    \"Download MongoDB at https://www.mongodb.com/try/download/community\"\r\n-  )}\r\n-\r\n-  After installation, try to run this command again to start MongoDB alongside your app.\\n\r\n-  `);\r\n-};\r\n-\r\n-const developmentServer = async () => {\r\n-  process.loader = new Loader({ defaultMessage: \"Starting server...\" });\r\n-\r\n-  const mongodbExists = commandExists.sync(\"mongod\");\r\n-\r\n-  if (mongodbExists) {\r\n-    const mongoProcessId = await startMongoDB();\r\n-    startWebpack();\r\n-    handleSignalEvents(isWindows ? [] : [mongoProcessId]);\r\n-  } else {\r\n-    process.loader.stop();\r\n-    warnMongoDBMissing();\r\n-    process.exit(1);\r\n-  }\r\n-};\r\n-\r\n-(async () => developmentServer())();\r\n"
                },
                {
                    "date": 1651156475887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n \r\n const developmentServer = async () => {\r\n   process.loader = new Loader({ defaultMessage: \"Starting server...\" });\r\n \r\n-  const mongodbExists = commandExists.sync(\"mongod\");\r\n+  const mongodbExists = true // commandExists.sync(\"mongod\");\r\n \r\n   if (mongodbExists) {\r\n     //const mongoProcessId = await startMongoDB();\r\n     startWebpack();\r\n"
                }
            ],
            "date": 1651155113687,
            "name": "Commit-0",
            "content": "/* eslint-disable consistent-return */\r\n\r\nimport chalk from \"chalk\";\r\nimport util from \"util\";\r\nimport child_process, { spawn } from \"child_process\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport os from \"os\";\r\nimport commandExists from \"command-exists\";\r\nimport webpack from \"webpack\";\r\nimport ps from \"ps-node\";\r\nimport Loader from \"./loader\";\r\nimport serverConfig from \"../webpack.config\";\r\n\r\nconst isWindows = os.platform() === \"win32\";\r\nconst exec = util.promisify(child_process.exec);\r\n\r\nconst handleCleanup = (processIds = []) => {\r\n  process.loader.stop();\r\n\r\n  processIds.forEach((processId) => {\r\n    ps.kill(processId);\r\n  });\r\n  process.exit();\r\n};\r\n\r\nconst handleSignalEvents = (processIds = []) => {\r\n  process.on(\"SIGINT\", () => handleCleanup(processIds));\r\n  process.on(\"SIGTERM\", () => handleCleanup(processIds));\r\n};\r\n\r\nconst handleServerProcessMessages = () => {\r\n  process.serverProcess.on(\"message\", (message) => {\r\n    const processMessages = [\"server_closed\"];\r\n\r\n    if (!processMessages.includes(message)) {\r\n      process.loader.stable(message);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleServerProcessSTDIO = () => {\r\n  try {\r\n    if (process.serverProcess) {\r\n      process.serverProcess.on(\"error\", (error) => {\r\n        console.log(error);\r\n      });\r\n\r\n      process.serverProcess.stdout.on(\"data\", (data) => {\r\n        console.log(data.toString());\r\n      });\r\n\r\n      process.serverProcess.stderr.on(\"data\", (data) => {\r\n        process.loader.stop();\r\n        console.log(chalk.redBright(data.toString()));\r\n      });\r\n    }\r\n  } catch (exception) {\r\n    throw new Error(\r\n      `[actionName.handleServerProcessSTDIO] ${exception.message}`\r\n    );\r\n  }\r\n};\r\n\r\nconst startApplicationProcess = () => {\r\n  const serverProcess = child_process.fork(path.resolve(\"dist/index.js\"), [], {\r\n    // NOTE: Pipe stdin, stdout, and stderr. IPC establishes a message channel so we\r\n    // communicate with the child_process.\r\n    silent: true,\r\n  });\r\n\r\n  process.serverProcess = serverProcess;\r\n\r\n  handleServerProcessSTDIO();\r\n  handleServerProcessMessages();\r\n};\r\n\r\nconst restartApplicationProcess = () => {\r\n  if (process.serverProcess && process.serverProcess.pid) {\r\n    ps.kill(process.serverProcess.pid);\r\n    startApplicationProcess();\r\n  }\r\n};\r\n\r\nconst startWebpack = () => {\r\n  process.loader.text(\"Building application...\");\r\n\r\n  const serverCompiler = webpack(serverConfig);\r\n\r\n  serverCompiler.watch({}, (error, stats) => {\r\n    if (error) {\r\n      console.error(error.stack || error);\r\n      if (error.details) {\r\n        console.error(error.details);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (stats.hasErrors()) {\r\n      process.loader.stop();\r\n      console.log(\r\n        `\\n${chalk.yellowBright(\"Errors occurred during the build process:\")}`\r\n      );\r\n\r\n      console.log(\r\n        stats.toString({\r\n          assets: false,\r\n          builtAt: false,\r\n          cachedAssets: false,\r\n          cachedModules: false,\r\n          chunks: false,\r\n          colors: true,\r\n          entrypoints: false,\r\n          hash: false,\r\n          modules: false,\r\n          timings: false,\r\n          version: false,\r\n        })\r\n      );\r\n    }\r\n  });\r\n\r\n  serverCompiler.hooks.done.tap(\"App\", () => {\r\n    if (!process.serverProcess) {\r\n      process.loader.text(\"Starting server...\");\r\n      startApplicationProcess();\r\n    } else {\r\n      process.loader.stop();\r\n      process.loader.start(\"Restarting server...\");\r\n      restartApplicationProcess();\r\n    }\r\n  });\r\n};\r\n\r\nconst getMongoProcessId = (stdout = null) => {\r\n  const forkedProcessId = stdout && stdout.match(/forked process:+\\s[0-9]+/gi);\r\n  const processId =\r\n    forkedProcessId &&\r\n    forkedProcessId[0] &&\r\n    forkedProcessId[0].replace(\"forked process: \", \"\");\r\n\r\n  return processId && parseInt(processId, 10);\r\n};\r\n\r\nconst startMongoDB = async () => {\r\n  process.loader.text(\"Starting MongoDB...\");\r\n\r\n  const dataDirectoryExists = fs.existsSync(\".data/mongodb\");\r\n\r\n  if (!dataDirectoryExists) {\r\n    fs.mkdirSync(\".data/mongodb\", { recursive: true });\r\n  }\r\n\r\n  if (isWindows) {\r\n    const currentPath = process.cwd();\r\n    const mongodbVersions = fs\r\n      .readdirSync(`C:\\Program Files\\MongoDB\\Server`)\r\n      .sort()\r\n      .reverse();\r\n    const latestMongodbVersion = mongodbVersions && mongodbVersions[0];\r\n\r\n    if (isWindows && mongodbVersions && mongodbVersions.length === 0) {\r\n      console.log(\r\n        chalk.red(\r\n          \"Couldn't find any MongoDB versions in C:\\\\Program Files\\\\MongoDB\\\\Server. Please double-check your MongoDB installation or re-install MongoDB and try again.\\n\"\r\n        )\r\n      );\r\n      process.exit(1);\r\n      return;\r\n    }\r\n\r\n    const mongodbWindowsCommand = `C:\\\\Program Files\\\\MongoDB\\\\Server\\\\${latestMongodbVersion}\\\\bin\\\\mongod`;\r\n    spawn(mongodbWindowsCommand, [\r\n      \"--dbpath\",\r\n      `${currentPath}/.data/mongodb`,\r\n      \"--quiet\",\r\n    ]);\r\n\r\n    return true;\r\n  }\r\n\r\n  const { stdout } = await exec(\r\n    \"mongod --port 27017 --dbpath ./.data/mongodb --quiet --fork --logpath ./.data/mongodb/log\"\r\n  );\r\n  return getMongoProcessId(stdout);\r\n};\r\n\r\nconst warnMongoDBMissing = () => {\r\n  console.warn(`\r\n  ${chalk.red(\"MongoDB not installed.\")}\\n\r\n  ${chalk.green(\r\n    \"Download MongoDB at https://www.mongodb.com/try/download/community\"\r\n  )}\r\n\r\n  After installation, try to run this command again to start MongoDB alongside your app.\\n\r\n  `);\r\n};\r\n\r\nconst developmentServer = async () => {\r\n  process.loader = new Loader({ defaultMessage: \"Starting server...\" });\r\n\r\n  const mongodbExists = commandExists.sync(\"mongod\");\r\n\r\n  if (mongodbExists) {\r\n    const mongoProcessId = await startMongoDB();\r\n    startWebpack();\r\n    handleSignalEvents(isWindows ? [] : [mongoProcessId]);\r\n  } else {\r\n    process.loader.stop();\r\n    warnMongoDBMissing();\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n(async () => developmentServer())();\r\n"
        }
    ]
}